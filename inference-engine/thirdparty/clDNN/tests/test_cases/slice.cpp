// Copyright (C) 2018-2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//
#include "test_utils.h"

#include <cldnn/primitives/input_layout.hpp>
#include <cldnn/primitives/slice.hpp>
#include <cldnn/primitives/data.hpp>

#include <random>
#include <algorithm>
#include <vector>

using namespace cldnn;
using namespace ::tests;

namespace {

class SliceTest : public ::testing::Test {
public:
    static std::vector<float> GenRandomValues(int size, int seed = 0) {
        std::mt19937 mersenne_engine(seed);
        std::uniform_int_distribution<> distrib(0);
        auto gen = [&distrib, &mersenne_engine]() {
            return static_cast<float>(distrib(mersenne_engine)) / std::numeric_limits<int>::max();
        };
        std::vector<float> result(size);
        std::generate(std::begin(result), std::end(result), gen);
        return result;
    }

    void TearDown() override {
        layout data_layout ( data_types::f32, format::bfyx, tensor{input_shape_} );
        std::vector<float> input_vals = GenRandomValues(data_layout.get_linear_size());
        memory::ptr input = engine_.allocate_memory(data_layout);
        set_values(input, input_vals);
        topology topology;
        topology.add(input_layout("input", input->get_layout()));
        topology.add(data("start", start_));
        topology.add(data("stop", stop_));
        topology.add(data("step", step_));
        std::vector<primitive_id> inputs {"input", "start", "stop", "step"};
        if (axes_) {
            topology.add(data("axes", axes_));
            inputs.push_back("axes");
        }
        topology.add(slice("slice", inputs, tensor{output_shape_}));

        network network(engine_, topology);

        network.set_input_data("input", input);

        auto outputs = network.execute();

        EXPECT_EQ(outputs.size(), size_t(1));
        EXPECT_EQ(outputs.begin()->first, "slice");

        auto output = outputs.at("slice").get_memory();

        cldnn::mem_lock<float> output_ptr(output, get_test_stream());

        ASSERT_EQ(output_ptr.size(), expected_output_.size());
        for (size_t i = 0; i < output_ptr.size(); ++i)
            EXPECT_TRUE(are_equal(expected_output_[i], output_ptr[i], 2e-3));
    }

protected:
    engine& engine_ = get_test_engine();
    std::vector<std::int32_t> input_shape_;
    memory::ptr start_;
    memory::ptr stop_;
    memory::ptr step_;
    memory::ptr axes_;
    std::vector<std::int32_t> output_shape_;
    std::vector<float> expected_output_;
};

TEST_F(SliceTest, test_1x2x12x100) {
    input_shape_ = { 1, 2, 100, 12 };
    start_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 4, 1, 1, 1 } });
    set_values<int64_t>(start_, {0, 1, 0, 1});
    stop_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 4, 1, 1, 1 } });
    set_values<int64_t>(stop_, { 1, 2, 5, 100 });
    step_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 4, 1, 1, 1 } });
    set_values<int64_t>(step_, { 1, 1, 1, 10 });
    output_shape_ = { 1, 1, 5, 10 };
    expected_output_ = {
            0.734951, 0.798445, 0.063149, 0.761191, 0.556658, 0.640653, 0.588532, 0.547355, 0.130243, 0.464633,
            0.288358, 0.120156, 0.268347, 0.817548, 0.794027, 0.373874, 0.002232, 0.300700, 0.431919, 0.144846,
            0.397784, 0.136586, 0.054801, 0.203541, 0.133193, 0.588362, 0.412903, 0.091354, 0.049096, 0.475945,
            0.436827, 0.501243, 0.603403, 0.310742, 0.889251, 0.711855, 0.074955, 0.296077, 0.307886, 0.987731,
            0.536346, 0.361321, 0.759333, 0.819715, 0.505708, 0.368409, 0.741947, 0.204039, 0.621296, 0.750756
    };
}

TEST_F(SliceTest, test_1x12x100_0) {
    input_shape_ = { 1, 12, 100 };
    start_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(start_, {0, 9, 0});
    stop_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(stop_, { 1, 11, 1 });
    step_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(step_, { 1, 1, 1 });
    output_shape_ = { 1, 2, 1 };
    expected_output_ = {0.993829, 0.460823};
}

TEST_F(SliceTest, test_1x12x100_1) {
    input_shape_ = { 1, 12, 100 };
    start_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(start_, {0, 1, 0});
    stop_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(stop_, { 10, -1, 10 });
    step_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(step_, { 1, 1, 1 });
    output_shape_ = {1, 10, 10};
    expected_output_ = {
            0.497506, 0.497506, 0.497506, 0.497506, 0.497506, 0.497506, 0.497506, 0.497506, 0.497506, 0.497506,
            0.938994, 0.938994, 0.938994, 0.938994, 0.938994, 0.938994, 0.938994, 0.938994, 0.938994, 0.938994,
            0.106854, 0.106854, 0.106854, 0.106854, 0.106854, 0.106854, 0.106854, 0.106854, 0.106854, 0.106854,
            0.196956, 0.196956, 0.196956, 0.196956, 0.196956, 0.196956, 0.196956, 0.196956, 0.196956, 0.196956,
            0.910888, 0.910888, 0.910888, 0.910888, 0.910888, 0.910888, 0.910888, 0.910888, 0.910888, 0.910888,
            0.400729, 0.400729, 0.400729, 0.400729, 0.400729, 0.400729, 0.400729, 0.400729, 0.400729, 0.400729,
            0.445728, 0.445728, 0.445728, 0.445728, 0.445728, 0.445728, 0.445728, 0.445728, 0.445728, 0.445728,
            0.235051, 0.235051, 0.235051, 0.235051, 0.235051, 0.235051, 0.235051, 0.235051, 0.235051, 0.235051,
            0.993829, 0.993829, 0.993829, 0.993829, 0.993829, 0.993829, 0.993829, 0.993829, 0.993829, 0.993829,
            0.460823, 0.460823, 0.460823, 0.460823, 0.460823, 0.460823, 0.460823, 0.460823, 0.460823, 0.460823
    };
}

TEST_F(SliceTest, test_2x12x100_0) {
    input_shape_ = { 2, 12, 100 };
    start_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(start_, {1, 12, 100});
    stop_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(stop_, { 0, 7, 0 });
    step_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(step_, { -1, -1, -1 });
    output_shape_ = {1, 4, 99};
    expected_output_ = {
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007, 0.575007,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963, 0.904963,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725, 0.087725,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194,
            0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194, 0.263194
    };
}

TEST_F(SliceTest, test_2x12x100_1) {
    input_shape_ = { 2, 12, 100 };
    start_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(start_, {-1, -1, -1});
    stop_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(stop_, { 0, 0, 4 });
    step_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(step_, { -1, -1, -1 });
    axes_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(step_, { 2, 0, 1 });
    output_shape_ = {1, 7, 99};
    expected_output_ = {0.397982, 0.734951, 0.495236, 0.646731, 0.552674, 0.739047, 0.000121, 0.759788, 0.573433, 0.038925, 0.287057,
            0.798445, 0.602618, 0.617056, 0.685842, 0.597227, 0.688578, 0.921819, 0.197221, 0.771478, 0.082360, 0.063149,
            0.018750, 0.102015, 0.204780, 0.121784, 0.339639, 0.296758, 0.111963, 0.001383, 0.237231, 0.761191, 0.489139,
            0.521177, 0.916425, 0.893093, 0.189394, 0.407242, 0.075069, 0.371633, 0.209472, 0.556658, 0.233117, 0.278267,
            0.715278, 0.009310, 0.849708, 0.071164, 0.776338, 0.803376, 0.171589, 0.712880, 0.125378, 0.556233, 0.925165,
            0.338625, 0.302460, 0.401901, 0.675682, 0.606506, 0.487808, 0.460611, 0.727690, 0.114941, 0.952006, 0.791267,
            0.068492, 0.237834, 0.835078, 0.531861, 0.290871, 0.518755, 0.388116, 0.919750, 0.718194, 0.493154, 0.630044,
            0.859994, 0.071485, 0.195792, 0.521822, 0.355859, 0.308779, 0.601302, 0.881695, 0.455741, 0.946652, 0.454313,
            0.533892, 0.042717, 0.204634, 0.584355, 0.251622, 0.410023, 0.279492, 0.661193, 0.746212, 0.102106, 0.700774,
            0.939987, 0.640653, 0.788322, 0.676563, 0.732960, 0.765528, 0.049538, 0.035537, 0.304729, 0.200467, 0.481392,
            0.588532, 0.870707, 0.254174, 0.485063, 0.504946, 0.195620, 0.085232, 0.107467, 0.792445, 0.334872, 0.547355,
            0.441649, 0.307165, 0.722213, 0.074259, 0.151700, 0.028503, 0.684208, 0.410998, 0.849705, 0.130243, 0.089142,
            0.502400, 0.648105, 0.610093, 0.324901, 0.163162, 0.800897, 0.442659, 0.801759, 0.464633, 0.997067, 0.475046,
            0.542612, 0.516118, 0.392748, 0.054156, 0.168356, 0.839715, 0.337852, 0.942414, 0.748125, 0.827560, 0.001434,
            0.029562, 0.591784, 0.606584, 0.711778, 0.756807, 0.150555, 0.938340, 0.156492, 0.742574, 0.195319, 0.234983,
            0.210745, 0.574305, 0.555980, 0.914299, 0.073383, 0.294800, 0.167583, 0.027275, 0.960843, 0.439722, 0.548591,
            0.339870, 0.078445, 0.060386, 0.860291, 0.862507, 0.888958, 0.941295, 0.689713, 0.202215, 0.636758, 0.336284,
            0.124262, 0.636057, 0.572907, 0.625022, 0.312197, 0.674162, 0.627181, 0.860471, 0.731078, 0.402534, 0.044663,
            0.236699, 0.288358, 0.050381, 0.792469, 0.297950, 0.245490, 0.400380, 0.606843, 0.533360, 0.244171, 0.519200,
            0.120156, 0.419721, 0.264611, 0.160570, 0.386473, 0.286157, 0.098999, 0.422603, 0.203709, 0.089860, 0.268347,
            0.633082, 0.147148, 0.597501, 0.510128, 0.808845, 0.130237, 0.793220, 0.302771, 0.213365, 0.817548, 0.592256,
            0.986814, 0.915670, 0.922100, 0.492805, 0.526693, 0.979370, 0.746898, 0.263375, 0.794027, 0.679686, 0.436256,
            0.569771, 0.617638, 0.207976, 0.443562, 0.149843, 0.966918, 0.631342, 0.088936, 0.543102, 0.127651, 0.529916,
            0.202748, 0.610377, 0.573452, 0.393293, 0.017808, 0.917446, 0.605756, 0.639668, 0.392902, 0.032506, 0.739881,
            0.885746, 0.314563, 0.075528, 0.642946, 0.785505, 0.948370, 0.308260, 0.305485, 0.280879, 0.959660, 0.353871,
            0.399758, 0.115819, 0.582778, 0.914126, 0.076089, 0.926100, 0.614613, 0.965256, 0.748828, 0.495535, 0.707638,
            0.756536, 0.718906, 0.505134, 0.773077, 0.060853, 0.387247, 0.251415, 0.224500, 0.084728, 0.298997, 0.455482,
            0.691028, 0.373874, 0.443648, 0.781709, 0.987890, 0.229535, 0.066187, 0.971590, 0.091021, 0.395966, 0.809547,
            0.002232, 0.393400, 0.826172, 0.574283, 0.893474, 0.247591, 0.634520, 0.182241, 0.239451, 0.548081, 0.300700,
            0.856757, 0.809287, 0.210189, 0.173911, 0.147653, 0.981933, 0.764684, 0.939176, 0.621861, 0.431919, 0.996870,
            0.276874, 0.638839, 0.387982, 0.213613, 0.962085, 0.913730, 0.596492, 0.975599, 0.144846, 0.697330, 0.295979,
            0.683966, 0.828913, 0.912742, 0.254998, 0.467417, 0.119516, 0.700542, 0.268856, 0.408747, 0.759323, 0.993156,
            0.084909, 0.040283, 0.963408, 0.949770, 0.680201, 0.871766, 0.137194, 0.617316, 0.457815, 0.715968, 0.870284,
            0.732294, 0.635264, 0.742426, 0.657908, 0.546767, 0.039383, 0.081750, 0.515643, 0.078405, 0.789448, 0.778574,
            0.630774, 0.470965, 0.058162, 0.478195, 0.068534, 0.602721, 0.263152, 0.851635, 0.286123, 0.746109, 0.686908,
            0.393704, 0.197520, 0.539201, 0.905307, 0.522340, 0.092768, 0.293167, 0.055893, 0.721269, 0.823253, 0.359813,
            0.841971, 0.397784, 0.212991, 0.113998, 0.834666, 0.293486, 0.766133, 0.907760, 0.786245, 0.794319, 0.771519,
            0.136586, 0.107059, 0.009858, 0.363245, 0.326527, 0.224449, 0.386669, 0.454863, 0.693216, 0.451618, 0.054801,
            0.659946, 0.615064, 0.085526, 0.435008, 0.000735, 0.087431, 0.547465, 0.924195, 0.812987, 0.203541, 0.168576,
            0.370626, 0.069979, 0.830251, 0.903614, 0.923508, 0.220495, 0.903179, 0.155986, 0.133193, 0.811578, 0.471941,
            0.306194, 0.395038, 0.043338, 0.940643, 0.484026, 0.480585, 0.500596, 0.742590, 0.912445, 0.857620, 0.190247,
            0.969884, 0.833868, 0.800939, 0.253024, 0.185702, 0.333084, 0.562907, 0.754538, 0.982760, 0.442980, 0.088504,
            0.098913, 0.862516, 0.770583, 0.844552, 0.259263, 0.082613, 0.065552, 0.009495, 0.488314, 0.713610, 0.678189,
            0.485064, 0.377464, 0.078095, 0.870532, 0.288117, 0.168415, 0.232927, 0.738198, 0.326363, 0.495230, 0.219139,
            0.246990, 0.214085, 0.840467, 0.989529, 0.437567, 0.065891, 0.499606, 0.620391, 0.020330, 0.831907, 0.462510,
            0.615748, 0.588362, 0.634748, 0.707808, 0.007420, 0.808243, 0.233734, 0.309681, 0.824963, 0.408289, 0.510529,
            0.412903, 0.719748, 0.351606, 0.231123, 0.434558, 0.018717, 0.392002, 0.572659, 0.481248, 0.333483, 0.091354,
            0.345393, 0.963107, 0.337952, 0.219366, 0.793768, 0.643395, 0.906396, 0.853188, 0.649998, 0.049096, 0.853055,
            0.776666, 0.622494, 0.188245, 0.987157, 0.080034, 0.305774, 0.160897, 0.015839, 0.475945, 0.078138, 0.539462,
            0.184529, 0.214602, 0.018120, 0.383448, 0.873065, 0.540955, 0.354674, 0.065439, 0.768546, 0.706150, 0.029800,
            0.308851, 0.625380, 0.722742, 0.962615, 0.918173, 0.415025, 0.546697, 0.740104, 0.392994, 0.331091, 0.059762,
            0.452362, 0.168423, 0.516281, 0.513135, 0.953603, 0.799171, 0.938769, 0.559347, 0.356402, 0.598758, 0.342344,
            0.800984, 0.863685, 0.847403, 0.641496, 0.148249, 0.766763, 0.732550, 0.145200, 0.532741, 0.737198, 0.438559,
            0.195844, 0.288480, 0.118046, 0.929757, 0.025755, 0.556100, 0.509297, 0.587234, 0.913198, 0.452393, 0.031476,
            0.056726, 0.436827, 0.469928, 0.975529, 0.026632, 0.931463, 0.532579, 0.417279, 0.681209, 0.896814, 0.304094,
            0.501243, 0.116928, 0.578307, 0.355303, 0.197156, 0.202568, 0.967001, 0.627390, 0.871425, 0.530606, 0.603403,
            0.630930, 0.122997, 0.860362, 0.682811, 0.779260, 0.374722, 0.350551, 0.019555, 0.403933, 0.310742, 0.754322,
            0.981098, 0.288796, 0.425365, 0.953228, 0.224144, 0.447436, 0.642844, 0.569559, 0.889251, 0.186508, 0.362535,
            0.802777, 0.224029, 0.266296, 0.234284, 0.162108, 0.712512, 0.961483, 0.164793, 0.909180, 0.302994, 0.419205,
            0.104994, 0.694919, 0.452286, 0.908331, 0.908465, 0.927389, 0.698175, 0.388388, 0.673280, 0.826270, 0.852962,
            0.794536, 0.088887, 0.291682, 0.450003, 0.653884, 0.209668, 0.228425, 0.167061, 0.236041, 0.065476, 0.281820,
            0.797695, 0.636901, 0.508576, 0.206386, 0.619705, 0.224782, 0.007720, 0.313686, 0.225503, 0.975677, 0.110815,
            0.052643, 0.594650, 0.545271, 0.916042, 0.084302, 0.612046, 0.454848, 0.136506, 0.859647, 0.136673, 0.639185};
}

TEST_F(SliceTest, test_10x12) {
    input_shape_ = { 10, 12 };
    start_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(start_, {-1, 1});
    stop_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(stop_, { -999, 10 });
    step_ = engine_.allocate_memory({ data_types::i64, format::bfyx, { 3, 1, 1, 1 } });
    set_values<int64_t>(step_, { -1, 1 });
    output_shape_ = {10, 9};
    expected_output_ = {
            0.499593, 0.626437, 0.461066, 0.789739, 0.847710, 0.949735, 0.038386, 0.940264, 0.603150,
            0.540016, 0.576953, 0.866576, 0.497506, 0.792197, 0.446163, 0.894251, 0.898395, 0.232404,
            0.637138, 0.018713, 0.263596, 0.578812, 0.529460, 0.366383, 0.795641, 0.040215, 0.329881,
            0.718889, 0.592280, 0.961787, 0.237455, 0.635966, 0.828526, 0.128295, 0.433644, 0.530779,
            0.737450, 0.027143, 0.194203, 0.192197, 0.937302, 0.111429, 0.902318, 0.039975, 0.078376,
            0.322619, 0.506583, 0.828737, 0.932622, 0.949395, 0.488851, 0.317939, 0.676015, 0.220750,
            0.120451, 0.341819, 0.420765, 0.716304, 0.257853, 0.630857, 0.727422, 0.650094, 0.076851,
            0.912301, 0.433101, 0.270436, 0.037580, 0.648282, 0.299350, 0.444643, 0.772978, 0.899900,
            0.040437, 0.736483, 0.280702, 0.947216, 0.922959, 0.236549, 0.286707, 0.211815, 0.829324,
            0.768763, 0.875174, 0.595069, 0.113426, 0.545313, 0.766883, 0.955330, 0.959954, 0.785570
    };
}

} // anonymous namespace
