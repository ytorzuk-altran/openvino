name: Windows (VS 2019, Python 3.11)
on:
  workflow_dispatch:
  schedule:
    # at 00:00 on workdays
    - cron: '0 0 * * 1,2,3,4,5'
#  pull_request:
#    paths-ignore:
#      - '**/docs/**'
#      - 'docs/**'
#      - '**/**.md'
#      - '**.md'
#      - '**/layer_tests_summary/**'
#      - '**/conformance/**'
# push:
#   paths-ignore:
#     - '**/docs/**'
#     - 'docs/**'
#     - '**/**.md'
#     - '**.md'
#     - '**/layer_tests_summary/**'
#     - '**/conformance/**'
#  branches:
#    - master

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-windows
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  Build:
    timeout-minutes: 180
    defaults:
      run:
        shell: pwsh
    runs-on: windows-2019-16-core
    env:
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Ninja Multi-Config'
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
      CMAKE_C_COMPILER_LAUNCHER: sccache
      OPENVINO_REPO: "${{ github.workspace }}\\openvino"
      OPENVINO_CONTRIB_REPO: "${{ github.workspace }}\\openvino_contrib"
      INSTALL_DIR: "${{ github.workspace }}\\openvino_install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\tests_install"
      BUILD_DIR: "${{ github.workspace }}\\openvino_build"
    steps:
      - name: Clone OpenVINO
        uses: actions/checkout@v4
        with:
          path: 'openvino'
          submodules: 'true'

      - name: Clone OpenVINO Contrib
        uses: actions/checkout@v4
        with:
          repository: 'openvinotoolkit/openvino_contrib'
          path: 'openvino_contrib'
          ref: 'master'

      #
      # Print system info
      #

      - name: System info
        uses: ./openvino/.github/actions/system_info

      #
      # Dependencies
      #

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install python dependencies
        run: |
          # For Python API: build and wheel packaging
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/wheel/requirements-dev.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt

          # For running ONNX frontend unit tests
          python3 -m pip install --force-reinstall -r ${{ env.OPENVINO_REPO }}/src/frontends/onnx/tests/requirements.txt

          # For running TensorFlow frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/tensorflow/tests/requirements.txt

          # For running TensorFlow Lite frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/tensorflow_lite/tests/requirements.txt

          # For running Paddle frontend unit tests
          # python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/paddle/tests/requirements.txt

      - name: Install build dependencies
        run: choco install --no-progress ninja

      #
      # Build
      #

      - name: Configure Developer Command Prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup sccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          variant: sccache
          max-size: "2000M"
          # Should save cache only if run in the master branch of the base repo
          # github.ref_name is 'ref/PR_#' in case of the PR, and 'branch_name' when executed on push
          save: ${{ github.ref_name == 'master' && 'true' || 'false'  }}
          append-timestamp: true
          key: ${{ github.job }}-${{ runner.os }}-common
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-common

      - name: CMake configure
        run: |
          cmake -G "${{ env.CMAKE_GENERATOR }}" `
            -DENABLE_CPPLINT=OFF `
            -DBUILD_nvidia_plugin=OFF `
            -DBUILD_SHARED_LIBS=ON `
            -DENABLE_TESTS=ON `
            -DCMAKE_COMPILE_WARNING_AS_ERROR=OFF `
            -DENABLE_STRICT_DEPENDENCIES=OFF `
            -DENABLE_PYTHON=ON `
            -DCMAKE_DISABLE_FIND_PACKAGE_PkgConfig=ON `
            -DCUSTOM_OPERATIONS="calculate_grid;complex_mul;fft;grid_sample;sparse_conv;sparse_conv_transpose" `
            -DOPENVINO_EXTRA_MODULES=${{ env.OPENVINO_CONTRIB_REPO }}/modules `
            -S ${{ env.OPENVINO_REPO }} `
            -B ${{ env.BUILD_DIR }}

      - name: Cmake build - OpenVINO
        run: cmake --build ${{ env.BUILD_DIR }} --parallel --config ${{ env.CMAKE_BUILD_TYPE }} --verbose

      - name: Cmake install - OpenVINO
        run: |
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/cmake_install.cmake
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_TEST_DIR }} -DCOMPONENT=tests -P ${{ env.BUILD_DIR }}/cmake_install.cmake
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCOMPONENT=python_wheels -P ${{ env.BUILD_DIR }}/cmake_install.cmake

      - name: Pack Artifacts
        run: |
          $file=Get-ChildItem -Path "${{ env.INSTALL_DIR }}"
          $compress = @{
            Path = $file
            CompressionLevel = "Optimal"
            DestinationPath = "${{ env.BUILD_DIR }}/openvino_package.zip"
          }
          Compress-Archive @compress

          $file=Get-ChildItem -Path "${{ env.INSTALL_TEST_DIR }}"
          $compress = @{
            Path = $file
            CompressionLevel = "Optimal"
            DestinationPath = "${{ env.BUILD_DIR }}/openvino_tests.zip"
          }
          Compress-Archive @compress

      - name: Cmake & Build - OpenVINO Contrib
        if: ${{ 'false' }} # Ticket: 122441
        run: |
          cmake `
            -DBUILD_nvidia_plugin=OFF `
            -DCUSTOM_OPERATIONS="calculate_grid;complex_mul;fft;grid_sample;sparse_conv;sparse_conv_transpose" `
            -DOPENVINO_EXTRA_MODULES=${{ env.OPENVINO_CONTRIB_REPO }}/modules `
            -S ${{ env.OPENVINO_REPO }} `
            -B ${{ env.BUILD_DIR }}
          cmake --build ${{ env.BUILD_DIR }} --parallel --config ${{ env.CMAKE_BUILD_TYPE }} --verbose

      - name: Upload openvino package
        uses: actions/upload-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.BUILD_DIR }}/openvino_package.zip
          if-no-files-found: 'error'

      - name: Upload openvino tests package
        uses: actions/upload-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.BUILD_DIR }}/openvino_tests.zip
          if-no-files-found: 'error'

  Samples:
    needs: Build
    timeout-minutes: 10
    defaults:
      run:
        shell: pwsh
    runs-on: windows-2019
    env:
      INSTALL_DIR: "${{ github.workspace }}\\install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"
      SAMPLES_INSTALL_DIR: "${{ github.workspace }}\\install\\samples"
      BUILD_DIR: "${{ github.workspace }}\\build"

    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build cpp samples
        run: |
          & ${{ env.SAMPLES_INSTALL_DIR }}/cpp/build_samples_msvc.bat -i ${{ env.INSTALL_DIR }} -b ${{ env.BUILD_DIR }}/cpp_samples
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'

      - name: Build c samples
        run: |
          & ${{ env.SAMPLES_INSTALL_DIR }}/c/build_samples_msvc.bat -i ${{ env.INSTALL_DIR }} -b ${{ env.BUILD_DIR }}/c_samples

      - name: Samples tests
        shell: cmd
        run: |
          python3 -m pip install --ignore-installed PyYAML -r ${{ env.INSTALL_TEST_DIR }}/smoke_tests/requirements.txt
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/smoke_tests --env_conf ${{ env.INSTALL_TEST_DIR }}/smoke_tests/env_config.yml --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-SamplesSmokeTests.xml
        env:
          IE_APP_PATH: ${{ env.INSTALL_DIR }}/samples_bin
          IE_APP_PYTHON_PATH: ${{ env.INSTALL_DIR }}/samples/python
          SHARE: ${{ env.INSTALL_TEST_DIR }}/smoke_tests/samples_smoke_tests_data
          WORKSPACE: ${{ env.INSTALL_DIR }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: test-results-samples
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  Python_Unit_Tests:
    name: Python unit tests
    needs: Build
    timeout-minutes: 75
    defaults:
      run:
        shell: pwsh
    runs-on: windows-2019
    env:
      OPENVINO_REPO: "${{ github.workspace }}\\openvino"
      OPENVINO_CONTRIB_REPO: "${{ github.workspace }}\\openvino_contrib"
      INSTALL_DIR: "${{ github.workspace }}\\install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"
      LAYER_TESTS_INSTALL_DIR: "${{ github.workspace }}\\install\\tests\\layer_tests"
      PYTHON_STATIC_ARGS: -m "not dynamic_library and not template_plugin"

    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      - name: Clone OpenVINO
        uses: actions/checkout@v4
        with:
          path: 'openvino'

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python API tests dependencies
        run: |
          # For torchvision to OpenVINO preprocessing converter
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/src/openvino/preprocess/torchvision/requirements.txt

          # TODO: replace with Python API tests requirements
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_dev.txt

      - name: Install OpenVINO Python wheels
        run: |
          # Find and install the core OV wheel
          $ovCoreWheelPath=Get-ChildItem -Path "${{ env.INSTALL_DIR }}\tools" -Filter openvino-*.whl | % { $_.FullName }
          python3 -m pip install "$ovCoreWheelPath"

          # Find and install the dev OV wheel
          $ovDevWheelPath=Get-ChildItem -Path "${{ env.INSTALL_DIR }}\tools" -Filter openvino_dev*.whl | % { $_.FullName }
          python3 -m pip install "$ovDevWheelPath[mxnet,caffe,kaldi,onnx,tensorflow2,pytorch]"

      - name: Python API 1.0 Tests
        shell: cmd
        run: |
          python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/pyngraph ${{ env.PYTHON_STATIC_ARGS }} --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml --ignore=${{ env.INSTALL_TEST_DIR }}/pyngraph/tests_compatibility/test_onnx/test_zoo_models.py

      - name: Python API 2.0 Tests
        shell: cmd
        run: |
          set PYTHONPATH=${{ env.LAYER_TESTS_INSTALL_DIR }};%PYTHONPATH%
          python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/pyopenvino ${{ env.PYTHON_STATIC_ARGS }} --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_utils/test_utils.py

      - name: Model Optimizer UT
        shell: cmd
        run: |
          python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/mo/unit_tests --ignore=${{ env.INSTALL_TEST_DIR }}/mo/unit_tests/mo/front/mxnet --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-ModelOptimizer.xml

      # Ticket - 115085
      - name: PyTorch Layer Tests
        if: ${{ 'false' }}
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/pytorch_tests -m precommit --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-pytorch.xml
        env:
          TEST_DEVICE: CPU

      - name: ONNX Layer Tests
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt

          :: requires 'unit_tests' from 'tools/mo'
          set PYTHONPATH=${{ env.OPENVINO_REPO }}\tools\mo;${{ env.LAYER_TESTS_INSTALL_DIR }};%PYTHONPATH%
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/onnx_tests -m "not launch_only_if_manually_specified and precommit" --junitxml=${INSTALL_TEST_DIR}/TEST-onnx.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: TensorFlow 1 Layer Tests - TF FE
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt

          :: requires 'unit_tests' from 'tools/mo'
          set PYTHONPATH=${{ env.OPENVINO_REPO }}\tools\mo;${{ env.LAYER_TESTS_INSTALL_DIR }};%PYTHONPATH%
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_tests/ --use_new_frontend -m precommit_tf_fe  --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf_fe.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: TensorFlow 2 Layer Tests - TF FE
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt

          :: requires 'unit_tests' from 'tools/mo'
          set PYTHONPATH=${{ env.OPENVINO_REPO }}\tools\mo;${{ env.LAYER_TESTS_INSTALL_DIR }};%PYTHONPATH%

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow2_keras_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf2_fe.xml
        env:
          TEST_DEVICE: CPU

      - name: TensorFlow 1 Layer Tests - Legacy FE
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_tests/test_tf_Roll.py --ir_version=10  --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf_Roll.xml

      - name: TensorFlow 2 Layer Tests - Legacy FE
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow2_keras_tests/test_tf2_keras_activation.py --ir_version=11 --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf2_Activation.xml -k "sigmoid"
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: TensorFlow Lite Layer Tests - TFL FE
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_lite_tests/ --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tfl_fe.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: Python ONNX operators tests
        shell: cmd
        run: |
          :: Skip test_onnx/test_zoo_models and test_onnx/test_backend due to long execution time - ONNX Model Zoo tests are run separately
          python3 -m pytest ${{ env.OPENVINO_REPO }}/src/frontends/onnx/tests -k "not cuda" ^
          --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-onnx_frontend.xml ^
          --ignore=${{ env.OPENVINO_REPO }}/src/frontends/onnx/tests/test_python/test_zoo_models.py

      - name: MO Python API Tests
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt

          :: TODO: remove setupvars.bat from here; currently, it's used for 'test_utils' installed in '<package>/python/openvino'
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/mo_python_api_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_mo_convert.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: OVC Python API Tests
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt

          :: TODO: remove setupvars.sh from here; currently, it's used for 'test_utils' installed in '<package>/python/openvino'
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/ovc_python_api_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_ovc_convert.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: Python Frontend tests
        shell: cmd
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt

          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/py_frontend_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_py_fontend.xml

      # TODO: install to 'tests' component via cpack
      - name: OVC unit tests
        shell: cmd
        run: python3 -m pytest -s ${{ env.OPENVINO_REPO }}/tools/ovc/unit_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-OpenVinoConversion.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: test-results-python
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  CXX_Unit_Tests:
    name: C++ unit tests
    needs: Build
    timeout-minutes: 15
    defaults:
      run:
        shell: pwsh
    runs-on: windows-2019
    env:
      INSTALL_DIR: "${{ github.workspace }}\\install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"

    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      - name: OpenVINO Core unit tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-NGraphUT.xml

      - name: OpenVINO Inference functional tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_inference_functional_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceFunc.xml

      - name: OpenVINO Inference unit tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_inference_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceUnit.xml

      - name: Low Precision Transformations Tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_lp_transformations_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-LpTransformations.xml

      - name: OpenVINO Conditional compilation tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_conditional_compilation_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ConditionalCompilation.xml

      - name: IR frontend tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_ir_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-IRFrontend.xml

      - name: PaddlePaddle frontend tests  # Disabled in Azure: https://github.com/openvinotoolkit/openvino/blob/master/.ci/azure/linux.yml#L403
        if: ${{ 'false' }}
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/paddle_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-PaddleTests.xml

      - name: ONNX frontend tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ONNXFrontend.xml

      - name: TensorFlow Common frontend tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_common_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowCommonFrontend.xml

      - name: TensorFlow frontend tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowFrontend.xml

      - name: TensorFlow Lite frontend tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_lite_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowLiteFrontend.xml

      - name: Transformations func tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_transformations_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-Transformations.xml

      - name: Legacy Transformations func tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_legacy_transformations_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-LegacyTransformations.xml

      - name: Inference Engine 1.0 unit tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/InferenceEngineUnitTests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceEngineUnitTests.xml

      - name: Common test utils tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_util_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-commonUtilsTests.xml

      - name: Snippets func tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_snippets_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-SnippetsFuncTests.xml

      - name: CPU plugin unit tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_cpu_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-CPUUnitTests.xml

      - name: SubgraphsDumper tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/subgraphsDumperTests --gtest_print_time=1  --gtest_print_time=1 --device=TEMPLATE --gtest_filter="*OpImpl*" --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-SubgraphsDumperTests.xml

      - name: Template OpImpl tests
        if: ${{ 'false' }} # Ticket: 123572
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/conformanceTests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TemplateOpImplTests.xml

      - name: GNA plugin unit tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_gna_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-GNAUnitTests.xml

      - name: AUTO unit tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_auto_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_unit_tests.xml

      - name: AUTO func Tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_auto_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_func_tests.xml

      - name: Template plugin func tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_template_func_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TemplateFuncTests.xml

      - name: Inference Engine C API tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/InferenceEngineCAPITests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceEngineCAPITests.xml

      - name: OpenVINO C API tests
        if: ${{ 'false' }} # Ticket: 123594
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_capi_test --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OpenVINOCAPITests.xml

      - name: AutoBatch unit tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_auto_batch_unit_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_batch_unit_tests.xml

      - name: AutoBatch func tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_auto_batch_func_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_batch_func_tests.xml

      - name: Proxy Plugin func tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_proxy_plugin_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVProxyTests.xml

      - name: Hetero Unit Tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_hetero_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVHeteroUnitTests.xml

      - name: Hetero Func Tests
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }}/ov_hetero_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVHeteroFuncTests.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: test-results-cpp
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  CPU_Functional_Tests:
    name: CPU functional tests
    needs: Build
    timeout-minutes: 30
    defaults:
      run:
        shell: pwsh
    runs-on: windows-2019-8-core
    env:
      INSTALL_DIR: "${{ github.workspace }}\\install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"
      PARALLEL_TEST_SCRIPT: "${{ github.workspace }}\\install\\tests\\functional_test_utils\\layer_tests_summary\\run_parallel.py"
      PARALLEL_TEST_CACHE: "${{ github.workspace }}\\install\\tests\\test_cache.lst"

    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install python dependencies
        shell: cmd
        run: python3 -m pip install -r ${{ github.workspace }}\install\tests\functional_test_utils\layer_tests_summary\requirements.txt

      - name: Restore tests execution time
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.PARALLEL_TEST_CACHE }}
          key: ${{ runner.os }}-tests-functional-cpu-stamp-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tests-functional-cpu-stamp

      - name: Intel CPU plugin func tests (parallel)
        shell: cmd
        run: |
          call "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 ${{ env.PARALLEL_TEST_SCRIPT }} -e ${{ env.INSTALL_TEST_DIR }}\ov_cpu_func_tests.exe -c ${{ env.PARALLEL_TEST_CACHE }} -w ${{ env.INSTALL_TEST_DIR }} -s suite -- --gtest_filter=*smoke*"
        timeout-minutes: 25

      - name: Save tests execution time
        uses: actions/cache/save@v3
        if: github.ref_name == 'master'
        with:
          path: ${{ env.PARALLEL_TEST_CACHE }}
          key: ${{ runner.os }}-tests-functional-cpu-stamp-${{ github.sha }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: test-results-functional-cpu
          path: |
            ${{ env.INSTALL_TEST_DIR }}/temp/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/failed/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/crashed/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/hanged/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/interapted/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/hash_table.csv
            ${{ env.PARALLEL_TEST_CACHE }}
          if-no-files-found: 'error'
